{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76728,"databundleVersionId":9057646,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Regression of Used Car Prices - Using various features of used cars to predict their sale price ","metadata":{}},{"cell_type":"markdown","source":"**By Nicole Michaud**\n\n**30 September, 2024**","metadata":{}},{"cell_type":"markdown","source":"The goal of this project is to use various features of used cars to predict the sale price of used cars in unseen data. Different modeling techniques, including multiple linear regression, lasso regression, random forests, and gradient boosting regressor, as well as hyperparameter tuning with GridSearchCV are used to obtain a regression model with a RMSE value that is improved from the RMSE of the baseline (first) model.","metadata":{}},{"cell_type":"markdown","source":"## Data Understanding","metadata":{}},{"cell_type":"markdown","source":"The training data includes information on 188,533 cars that were made between the years of 1974 and 2024, and the testing data has 125,690 cars from between those same years. Both the training and testing data contain 10 different features about the cars, with the training set differing because it includes the target, 'price'.","metadata":{}},{"cell_type":"markdown","source":"## Data Exploration","metadata":{}},{"cell_type":"markdown","source":"##### Loading necessary packages and importing the data:","metadata":{}},{"cell_type":"code","source":"pip install -U scikit-learn","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:16.366498Z","iopub.execute_input":"2024-09-30T18:46:16.367442Z","iopub.status.idle":"2024-09-30T18:46:28.248093Z","shell.execute_reply.started":"2024-09-30T18:46:16.367390Z","shell.execute_reply":"2024-09-30T18:46:28.246911Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (1.5.2)\nRequirement already satisfied: numpy>=1.19.5 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.26.4)\nRequirement already satisfied: scipy>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.14.0)\nRequirement already satisfied: joblib>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=3.1.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (3.5.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"# importing necessary packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\n%matplotlib inline\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.preprocessing import OrdinalEncoder, OneHotEncoder, TargetEncoder, LabelEncoder\nfrom sklearn.metrics import root_mean_squared_error\nfrom sklearn.model_selection import train_test_split, cross_val_predict, cross_val_score, GridSearchCV\nimport re\n\n#connecting to kaggle input\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-30T18:46:28.250833Z","iopub.execute_input":"2024-09-30T18:46:28.251707Z","iopub.status.idle":"2024-09-30T18:46:29.597064Z","shell.execute_reply.started":"2024-09-30T18:46:28.251664Z","shell.execute_reply":"2024-09-30T18:46:29.596063Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e9/sample_submission.csv\n/kaggle/input/playground-series-s4e9/train.csv\n/kaggle/input/playground-series-s4e9/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# loading the training dataset\ntrain_df = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv')\ntrain_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:29.598131Z","iopub.execute_input":"2024-09-30T18:46:29.598573Z","iopub.status.idle":"2024-09-30T18:46:30.175576Z","shell.execute_reply.started":"2024-09-30T18:46:29.598539Z","shell.execute_reply":"2024-09-30T18:46:30.174632Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   id          brand              model  model_year  milage      fuel_type  \\\n0   0           MINI      Cooper S Base        2007  213000       Gasoline   \n1   1        Lincoln              LS V8        2002  143250       Gasoline   \n2   2      Chevrolet  Silverado 2500 LT        2002  136731  E85 Flex Fuel   \n3   3        Genesis   G90 5.0 Ultimate        2017   19500       Gasoline   \n4   4  Mercedes-Benz        Metris Base        2021    7388       Gasoline   \n\n                                              engine  \\\n0       172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel   \n1       252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel   \n2  320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...   \n3       420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n4       208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n\n                     transmission ext_col int_col  \\\n0                             A/T  Yellow    Gray   \n1                             A/T  Silver   Beige   \n2                             A/T    Blue    Gray   \n3  Transmission w/Dual Shift Mode   Black   Black   \n4                     7-Speed A/T   Black   Beige   \n\n                                 accident clean_title  price  \n0                           None reported         Yes   4200  \n1  At least 1 accident or damage reported         Yes   4999  \n2                           None reported         Yes  13900  \n3                           None reported         Yes  45000  \n4                           None reported         Yes  97500  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>MINI</td>\n      <td>Cooper S Base</td>\n      <td>2007</td>\n      <td>213000</td>\n      <td>Gasoline</td>\n      <td>172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Yellow</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>4200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Lincoln</td>\n      <td>LS V8</td>\n      <td>2002</td>\n      <td>143250</td>\n      <td>Gasoline</td>\n      <td>252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Silver</td>\n      <td>Beige</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>4999</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Chevrolet</td>\n      <td>Silverado 2500 LT</td>\n      <td>2002</td>\n      <td>136731</td>\n      <td>E85 Flex Fuel</td>\n      <td>320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...</td>\n      <td>A/T</td>\n      <td>Blue</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>13900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Genesis</td>\n      <td>G90 5.0 Ultimate</td>\n      <td>2017</td>\n      <td>19500</td>\n      <td>Gasoline</td>\n      <td>420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Mercedes-Benz</td>\n      <td>Metris Base</td>\n      <td>2021</td>\n      <td>7388</td>\n      <td>Gasoline</td>\n      <td>208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>Black</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>97500</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# loading the test dataset\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.177888Z","iopub.execute_input":"2024-09-30T18:46:30.178211Z","iopub.status.idle":"2024-09-30T18:46:30.524221Z","shell.execute_reply.started":"2024-09-30T18:46:30.178176Z","shell.execute_reply":"2024-09-30T18:46:30.523140Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.525396Z","iopub.execute_input":"2024-09-30T18:46:30.525721Z","iopub.status.idle":"2024-09-30T18:46:30.564232Z","shell.execute_reply.started":"2024-09-30T18:46:30.525687Z","shell.execute_reply":"2024-09-30T18:46:30.563287Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                  id     model_year         milage         price\ncount  188533.000000  188533.000000  188533.000000  1.885330e+05\nmean    94266.000000    2015.829998   65705.295174  4.387802e+04\nstd     54424.933488       5.660967   49798.158076  7.881952e+04\nmin         0.000000    1974.000000     100.000000  2.000000e+03\n25%     47133.000000    2013.000000   24115.000000  1.700000e+04\n50%     94266.000000    2017.000000   57785.000000  3.082500e+04\n75%    141399.000000    2020.000000   95400.000000  4.990000e+04\nmax    188532.000000    2024.000000  405000.000000  2.954083e+06","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>188533.000000</td>\n      <td>188533.000000</td>\n      <td>188533.000000</td>\n      <td>1.885330e+05</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>94266.000000</td>\n      <td>2015.829998</td>\n      <td>65705.295174</td>\n      <td>4.387802e+04</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>54424.933488</td>\n      <td>5.660967</td>\n      <td>49798.158076</td>\n      <td>7.881952e+04</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>1974.000000</td>\n      <td>100.000000</td>\n      <td>2.000000e+03</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>47133.000000</td>\n      <td>2013.000000</td>\n      <td>24115.000000</td>\n      <td>1.700000e+04</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>94266.000000</td>\n      <td>2017.000000</td>\n      <td>57785.000000</td>\n      <td>3.082500e+04</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>141399.000000</td>\n      <td>2020.000000</td>\n      <td>95400.000000</td>\n      <td>4.990000e+04</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>188532.000000</td>\n      <td>2024.000000</td>\n      <td>405000.000000</td>\n      <td>2.954083e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.565326Z","iopub.execute_input":"2024-09-30T18:46:30.565640Z","iopub.status.idle":"2024-09-30T18:46:30.651798Z","shell.execute_reply.started":"2024-09-30T18:46:30.565607Z","shell.execute_reply":"2024-09-30T18:46:30.650825Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 188533 entries, 0 to 188532\nData columns (total 13 columns):\n #   Column        Non-Null Count   Dtype \n---  ------        --------------   ----- \n 0   id            188533 non-null  int64 \n 1   brand         188533 non-null  object\n 2   model         188533 non-null  object\n 3   model_year    188533 non-null  int64 \n 4   milage        188533 non-null  int64 \n 5   fuel_type     183450 non-null  object\n 6   engine        188533 non-null  object\n 7   transmission  188533 non-null  object\n 8   ext_col       188533 non-null  object\n 9   int_col       188533 non-null  object\n 10  accident      186081 non-null  object\n 11  clean_title   167114 non-null  object\n 12  price         188533 non-null  int64 \ndtypes: int64(4), object(9)\nmemory usage: 18.7+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The training data contains information on a total of 188,533 different used cars, and it has 10 features (not including id, or the target, price). The columns 'fuel_type', 'accident', and 'clean_title' appear to have some null values.","metadata":{}},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.652941Z","iopub.execute_input":"2024-09-30T18:46:30.653275Z","iopub.status.idle":"2024-09-30T18:46:30.712211Z","shell.execute_reply.started":"2024-09-30T18:46:30.653224Z","shell.execute_reply":"2024-09-30T18:46:30.711328Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 125690 entries, 0 to 125689\nData columns (total 12 columns):\n #   Column        Non-Null Count   Dtype \n---  ------        --------------   ----- \n 0   id            125690 non-null  int64 \n 1   brand         125690 non-null  object\n 2   model         125690 non-null  object\n 3   model_year    125690 non-null  int64 \n 4   milage        125690 non-null  int64 \n 5   fuel_type     122307 non-null  object\n 6   engine        125690 non-null  object\n 7   transmission  125690 non-null  object\n 8   ext_col       125690 non-null  object\n 9   int_col       125690 non-null  object\n 10  accident      124058 non-null  object\n 11  clean_title   111451 non-null  object\ndtypes: int64(3), object(9)\nmemory usage: 11.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.713248Z","iopub.execute_input":"2024-09-30T18:46:30.713589Z","iopub.status.idle":"2024-09-30T18:46:30.739554Z","shell.execute_reply.started":"2024-09-30T18:46:30.713557Z","shell.execute_reply":"2024-09-30T18:46:30.738557Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"                  id     model_year         milage\ncount  125690.000000  125690.000000  125690.000000\nmean   251377.500000    2015.797526   66042.581510\nstd     36283.722005       5.673797   50223.858435\nmin    188533.000000    1974.000000     100.000000\n25%    219955.250000    2013.000000   24500.000000\n50%    251377.500000    2017.000000   57500.000000\n75%    282799.750000    2020.000000   95798.000000\nmax    314222.000000    2024.000000  405000.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_year</th>\n      <th>milage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>125690.000000</td>\n      <td>125690.000000</td>\n      <td>125690.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>251377.500000</td>\n      <td>2015.797526</td>\n      <td>66042.581510</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>36283.722005</td>\n      <td>5.673797</td>\n      <td>50223.858435</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>188533.000000</td>\n      <td>1974.000000</td>\n      <td>100.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>219955.250000</td>\n      <td>2013.000000</td>\n      <td>24500.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>251377.500000</td>\n      <td>2017.000000</td>\n      <td>57500.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>282799.750000</td>\n      <td>2020.000000</td>\n      <td>95798.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>314222.000000</td>\n      <td>2024.000000</td>\n      <td>405000.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"The testing data contains info on a total of 125,690 different used cars, with the same 10 features as the training data, but it does not have the target (price).","metadata":{}},{"cell_type":"code","source":"#the columns with null values need to be dealt with\ntrain_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.740654Z","iopub.execute_input":"2024-09-30T18:46:30.740956Z","iopub.status.idle":"2024-09-30T18:46:30.821762Z","shell.execute_reply.started":"2024-09-30T18:46:30.740924Z","shell.execute_reply":"2024-09-30T18:46:30.820708Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"id                  0\nbrand               0\nmodel               0\nmodel_year          0\nmilage              0\nfuel_type        5083\nengine              0\ntransmission        0\next_col             0\nint_col             0\naccident         2452\nclean_title     21419\nprice               0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"Dealing with null values:","metadata":{}},{"cell_type":"code","source":"train_df['clean_title'] = train_df['clean_title'].fillna('No')\ntest_df['clean_title'] = test_df['clean_title'].fillna('No')","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.825338Z","iopub.execute_input":"2024-09-30T18:46:30.825650Z","iopub.status.idle":"2024-09-30T18:46:30.853417Z","shell.execute_reply.started":"2024-09-30T18:46:30.825611Z","shell.execute_reply":"2024-09-30T18:46:30.852683Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"train_df['accident'] = train_df['accident'].fillna('None reported')\ntest_df['accident'] = test_df['accident'].fillna('None reported')","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.854493Z","iopub.execute_input":"2024-09-30T18:46:30.854795Z","iopub.status.idle":"2024-09-30T18:46:30.882190Z","shell.execute_reply.started":"2024-09-30T18:46:30.854762Z","shell.execute_reply":"2024-09-30T18:46:30.881461Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"len(train_df[train_df.apply(lambda r: r.str.contains('–').any(), axis=1)])","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:46:30.883275Z","iopub.execute_input":"2024-09-30T18:46:30.883570Z","iopub.status.idle":"2024-09-30T18:47:09.829293Z","shell.execute_reply.started":"2024-09-30T18:46:30.883537Z","shell.execute_reply":"2024-09-30T18:47:09.828289Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"5647"},"metadata":{}}]},{"cell_type":"markdown","source":"There are too many rows containing '–' to just drop them all, so I will deal with this on a case-by-case basis as I process each feature individually.","metadata":{}},{"cell_type":"code","source":"# making sure there are no more null values, except for in 'fuel_type', which I will deal with separately\ntrain_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:47:09.830701Z","iopub.execute_input":"2024-09-30T18:47:09.831224Z","iopub.status.idle":"2024-09-30T18:47:09.914415Z","shell.execute_reply.started":"2024-09-30T18:47:09.831174Z","shell.execute_reply":"2024-09-30T18:47:09.913339Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"id                 0\nbrand              0\nmodel              0\nmodel_year         0\nmilage             0\nfuel_type       5083\nengine             0\ntransmission       0\next_col            0\nint_col            0\naccident           0\nclean_title        0\nprice              0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"data_pred = train_df.iloc[:,1:13]\n\ntest_ids = test_df['id']\ntest_df = test_df.iloc[:,1:12]\n\ndata_pred.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:47:09.915849Z","iopub.execute_input":"2024-09-30T18:47:09.916368Z","iopub.status.idle":"2024-09-30T18:47:09.965207Z","shell.execute_reply.started":"2024-09-30T18:47:09.916321Z","shell.execute_reply":"2024-09-30T18:47:09.964231Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"           brand              model  model_year  milage      fuel_type  \\\n0           MINI      Cooper S Base        2007  213000       Gasoline   \n1        Lincoln              LS V8        2002  143250       Gasoline   \n2      Chevrolet  Silverado 2500 LT        2002  136731  E85 Flex Fuel   \n3        Genesis   G90 5.0 Ultimate        2017   19500       Gasoline   \n4  Mercedes-Benz        Metris Base        2021    7388       Gasoline   \n\n                                              engine  \\\n0       172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel   \n1       252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel   \n2  320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...   \n3       420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel   \n4       208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel   \n\n                     transmission ext_col int_col  \\\n0                             A/T  Yellow    Gray   \n1                             A/T  Silver   Beige   \n2                             A/T    Blue    Gray   \n3  Transmission w/Dual Shift Mode   Black   Black   \n4                     7-Speed A/T   Black   Beige   \n\n                                 accident clean_title  price  \n0                           None reported         Yes   4200  \n1  At least 1 accident or damage reported         Yes   4999  \n2                           None reported         Yes  13900  \n3                           None reported         Yes  45000  \n4                           None reported         Yes  97500  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>MINI</td>\n      <td>Cooper S Base</td>\n      <td>2007</td>\n      <td>213000</td>\n      <td>Gasoline</td>\n      <td>172.0HP 1.6L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Yellow</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>4200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lincoln</td>\n      <td>LS V8</td>\n      <td>2002</td>\n      <td>143250</td>\n      <td>Gasoline</td>\n      <td>252.0HP 3.9L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>Silver</td>\n      <td>Beige</td>\n      <td>At least 1 accident or damage reported</td>\n      <td>Yes</td>\n      <td>4999</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Chevrolet</td>\n      <td>Silverado 2500 LT</td>\n      <td>2002</td>\n      <td>136731</td>\n      <td>E85 Flex Fuel</td>\n      <td>320.0HP 5.3L 8 Cylinder Engine Flex Fuel Capab...</td>\n      <td>A/T</td>\n      <td>Blue</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>13900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Genesis</td>\n      <td>G90 5.0 Ultimate</td>\n      <td>2017</td>\n      <td>19500</td>\n      <td>Gasoline</td>\n      <td>420.0HP 5.0L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>45000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Mercedes-Benz</td>\n      <td>Metris Base</td>\n      <td>2021</td>\n      <td>7388</td>\n      <td>Gasoline</td>\n      <td>208.0HP 2.0L 4 Cylinder Engine Gasoline Fuel</td>\n      <td>7-Speed A/T</td>\n      <td>Black</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>97500</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Preprocessing","metadata":{}},{"cell_type":"markdown","source":"#### Preprocessing and exploring numeric features in the data:","metadata":{}},{"cell_type":"code","source":"numeric_data = data_pred.select_dtypes(include=np.number)\nnumeric_data.corr()\nsns.set(rc={'figure.figsize':(10,8)})\nsns.heatmap(numeric_data.corr(), annot=True)\nplt.savefig(\"heatmap.png\");","metadata":{"execution":{"iopub.status.busy":"2024-09-30T18:48:23.497470Z","iopub.execute_input":"2024-09-30T18:48:23.498491Z","iopub.status.idle":"2024-09-30T18:48:23.990785Z","shell.execute_reply.started":"2024-09-30T18:48:23.498445Z","shell.execute_reply":"2024-09-30T18:48:23.989776Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x800 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"##### Feature: model_year","metadata":{}},{"cell_type":"code","source":"data_pred['model_year'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# distribution of model_year\ndata_pred['model_year'].hist();","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The model year values include some from this yar (2024). For simplicity, I am going to subtract each car's model_year from this maximum value to instead show how many years since the car was made.","metadata":{}},{"cell_type":"code","source":"print(data_pred['model_year'].max(), data_pred['model_year'].min())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred['model_age'] = 2024 - data_pred.model_year \ntest_df['model_age'] = 2024 - test_df.model_year ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred.drop(columns=['model_year'], inplace=True)\ntest_df.drop(columns=['model_year'], inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The oldest car(s) in the dataset is 50 years old. The newest cars are 0 years old.","metadata":{}},{"cell_type":"markdown","source":"#### Preprocessing and exploring categorical features in the data:","metadata":{}},{"cell_type":"markdown","source":"##### Feature: clean_title (whether or not the car has a clean title)","metadata":{}},{"cell_type":"code","source":"#clean_title\nfig, ax = plt.subplots(figsize=(12,8))\n\nsns.set(font_scale=1.5)\ndata_pred.groupby(\"clean_title\").mean(numeric_only=True).sort_values(\"price\",ascending=False).plot.bar(y=\"price\", ax=ax).set(ylabel=\"Price\", xlabel=\"Clean Title (Yes/No)\", title=\"Sale Price vs. Clean_title\")\nax.axhline(y=data_pred[\"price\"].mean(numeric_only=True), label=\"mean\", color=\"black\", linestyle=\"--\")\nylabels = ['${:,.0f}k'.format(x) for x in ax.get_yticks()/1000]\nax.set_yticklabels(ylabels);","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"While the feature clean_title does seem to have a relationship with car sale price, it seems that the opposite of what may be expected is true: cars that do NOT have a clean title have a higher average sale price. ","metadata":{}},{"cell_type":"markdown","source":"##### Feature: accident (whether or not the car has ever been involved in an accident)","metadata":{}},{"cell_type":"code","source":"#accident\nfig, ax = plt.subplots(figsize=(12,8))\n\nsns.set(font_scale=1.5)\ndata_pred.groupby(\"accident\").mean(numeric_only=True).sort_values(\"price\",ascending=False).plot.bar(y=\"price\", ax=ax).set(ylabel=\"Price\", xlabel=\"Accident (Yes/No)\", title=\"Sale Price vs. Accident\")\nax.axhline(y=data_pred[\"price\"].mean(numeric_only=True), label=\"mean\", color=\"black\", linestyle=\"--\")\nylabels = ['${:,.0f}k'.format(x) for x in ax.get_yticks()/1000]\nax.set_yticklabels(ylabels);\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Whether or not a car has had an accident or damage does appear to be related to the car sale price, with cars having no accident/damage having a higher average sale price.","metadata":{}},{"cell_type":"markdown","source":"##### Feature: fuel_type","metadata":{}},{"cell_type":"code","source":"data_pred['fuel_type'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred['fuel_type'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"unknown_fuel = data_pred[(data_pred[\"fuel_type\"].isna()) | (data_pred[\"fuel_type\"] == \"not supported\") | (data_pred[\"fuel_type\"] == \"–\")]\nunknown_fuel","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# changing all the unknown, incomplete, or null values in 'fuel_type' to be 'None'\n\ndata_pred['fuel_type'] = data_pred['fuel_type'].replace({'–': 'None',\n                                                        'not supported':'None'})\ndata_pred['fuel_type'] = data_pred['fuel_type'].fillna('None')\n\ntest_df['fuel_type'] = test_df['fuel_type'].replace({'–': 'None',\n                                                        'not supported':'None'})\ntest_df['fuel_type'] = test_df['fuel_type'].fillna('None')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#combining columns 'fuel_type' and 'engine' into a single new column, as both seem to contain information about the fuel type\ndata_pred['fuel_type_engine'] = data_pred[['fuel_type', 'engine']].values.tolist()\ntest_df['fuel_type_engine'] = test_df[['fuel_type', 'engine']].values.tolist()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Creating a function to clean the text in 'fuel_type_engine', so that it is more consistent and easier to search through\n# this function makes all letters lowercase, removes numbers and other characters that aren't letters, and joins the words together as a string\nno_bad_chars = re.compile('[!\\\"#$%&()*+-./:;<=>?@[\\]^_`{|}~\\n - ]')\nno_nums = re.compile('[\\d-]')\n\ndef clean_text(text):\n    text = no_nums.sub('', text)\n    text = no_bad_chars.sub(' ', text)\n    text = text.lower()\n    text = ' '.join(word for word in text.split())\n    return text\n     ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# applying the text cleaning function\ndata_pred['fuel_type_engine'] = data_pred['fuel_type_engine'].astype(str)\ndata_pred['fuel_type_engine'] = data_pred['fuel_type_engine'].apply(clean_text)\ntest_df['fuel_type_engine'] = test_df['fuel_type_engine'].astype(str)\ntest_df['fuel_type_engine'] = test_df['fuel_type_engine'].apply(clean_text)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# creating a list to contain the fuel type values extracted from the 'engine' column\nfuels = []\n\n#iterating through all rows to see if the fuel type is in ANY of the columns (such as in 'engine' instead of 'fuel_type')\n#appending those values to the list \nfor index, row in data_pred.iterrows():\n    if \"electric\" in row.fuel_type_engine: \n        fuels.append(\"Electric\")\n    elif \"hybrid\" in row.fuel_type_engine:\n        fuels.append(\"Hybrid\")\n    elif \"diesel\" in row.fuel_type_engine: \n        fuels.append(\"Diesel\")\n    elif \"flex\" in row.fuel_type_engine: \n        fuels.append(\"Flex\")\n    elif \"gasoline\" in row.fuel_type_engine: \n        fuels.append(\"Gasoline\")\n    else: fuels.append(\"None\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred['fuel_type2'] = fuels","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# doing the same for test_df\nfuels_test = []\n\n\nfor index, row in test_df.iterrows():\n    if \"electric\" in row.fuel_type_engine: \n        fuels_test.append(\"Electric\")\n    elif \"hybrid\" in row.fuel_type_engine:\n        fuels_test.append(\"Hybrid\")\n    elif \"diesel\" in row.fuel_type_engine: \n        fuels_test.append(\"Diesel\")\n    elif \"flex\" in row.fuel_type_engine: \n        fuels_test.append(\"Flex\")\n    elif \"gasoline\" in row.fuel_type_engine: \n        fuels_test.append(\"Gasoline\")\n    else: fuels_test.append(\"None\")\n        \ntest_df['fuel_type2'] = fuels_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred['fuel_type2'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#fuel type\nfig, ax = plt.subplots(figsize=(12,8))\n\nsns.set(font_scale=1.5)\ndata_pred.groupby(\"fuel_type2\").mean(numeric_only=True).sort_values(\"price\",ascending=False).plot.bar(y=\"price\", ax=ax).set(ylabel=\"Price\", xlabel=\"Fuel Type\", title=\"Sale Price vs. Fuel Type\")\nax.axhline(y=data_pred[\"price\"].mean(numeric_only=True), label=\"mean\", color=\"black\", linestyle=\"--\");","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred.drop(columns = ['fuel_type_engine', 'fuel_type'], inplace=True)\ntest_df.drop(columns = ['fuel_type_engine', 'fuel_type'], inplace=True)\ndata_pred.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Feature: ext_col (exterior color)","metadata":{}},{"cell_type":"markdown","source":"Car exterior colors can have a lot of different names. In order to see if the actual color has an impact on car sale price, I want to rename different color names to be the basic color family they belong to, effectively creating fewer categories. Those that do not have a color listed will be categorized as unknown, and custom color will be its own category, since there is no information on what that actual color is.","metadata":{}},{"cell_type":"code","source":"data_pred['ext_col'] = data_pred['ext_col'].str.lower()\ntest_df['ext_col'] = test_df['ext_col'].str.lower()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"colors = {\n    'snowflake white pearl metallic': 'white', \n    'santorini black metallic': 'black',\n    'ebony twilight metallic': 'black',\n    'magnetite black metallic': 'black',\n    'diamond black': 'black',\n    'vega blue': 'blue',\n    'platinum white pearl': 'white',\n    'white frost tri-coat': 'white',\n    'firecracker red clearcoat': 'red',\n    'phytonic blue metallic': 'blue', \n    'blu': 'blue', \n    'brilliant silver metallic': 'silver',\n    'black raven': 'black',\n    'black clearcoat': 'black',\n    'firenze red': 'red',\n    'agate black metallic': 'black',\n    'glacial white pearl': 'white',\n    'majestic plum metallic': 'purple', \n    'designo diamond white metallic': 'white',\n    'oxford white': 'white',\n    'black sapphire metallic': 'black', \n    'mythos black': 'black',\n    'granite crystal clearcoat metallic': 'gray', \n    'white diamond tri-coat':'white',\n    'magnetite gray metallic':'gray', \n    'carpathian grey premium metallic':'gray', \n    'designo diamond white bright': 'white',\n    'phantom black pearl effect / black roof': 'black',\n    'nebula gray pearl':'gray',\n    'deep crystal blue mica':'blue',\n    'flame red clearcoat':'red',\n    'lunar blue metallic':'blue',\n    'bright white clearcoat':'white',\n    'rapid red metallic tinted clearcoat':'red', \n    'caviar': 'black',\n    'dark ash metallic':'gray', \n    'velvet red pearlcoat':'red',\n    'silver zynith':'silver',\n    'super black':'black', \n    'antimatter blue metallic': 'blue',\n    'dark moon blue metallic':'blue',\n    'summit white':'white', \n    'ebony black':'black', \n    '–':'Unknown',\n    'black cherry':'red', \n    'delmonico red pearlcoat':'red',\n    'platinum quartz metallic':'white', \n    'ultra white':'white',\n    'python green':'green',\n    'garnet red metallic':'red',\n    'snow white pearl':'white',\n    'cajun red tintcoat':'red',\n    'midnight black metallic':'black',\n    'diamond white':'white',\n    'mythos black metallic':'black', \n    'soul red crystal metallic':'red',\n    'atomic silver':'silver',\n    'obsidian':'black',\n    'magnetic metallic':'gray',\n    'twilight blue metallic':'blue',\n    'star white':'white', \n    'stormy sea':'blue',\n    'tango red metallic':'red',\n    'hyper red':'red', \n    'portofino gray':'gray',\n    'manufaktur diamond white bright':'white',\n    'snowflake white pearl':'white',\n    'patriot blue pearlcoat':'blue', \n    'tungsten metallic':'gray',\n    'chronos gray metallic':'gray',\n    'silver ice metallic':'silver',\n    'daytona gray pearl effect':'gray',\n    'ruby red metallic tinted clearcoat':'red',\n    'alpine white':'white',\n    'eminent white pearl':'white',\n    'manhattan noir metallic':'black',\n    'quicksilver metallic':'silver', \n    'stellar black metallic':'black',\n    'sparkling silver':'silver',\n    'blueprint':'blue', \n    'crystal black silica':'black',\n    'black noir pearl':'black',\n    'arancio borealis':'orange',\n    'typhoon gray':'gray',\n    'ibis white':'white',\n    'graphite grey':'gray',\n    'mineral white':'white',\n    'midnight black':'black',\n    'northsky blue metallic':'blue',\n    'alta white':'white',\n    'brilliant black':'black',\n    'jet black mica':'black',\n    'daytona gray pearl effect w/ black roof':'gray',\n    'redline red':'red',\n    'glacier silver metallic':'silver', \n    'magnetic black':'black',\n    'chronos gray':'gray',\n    'red quartz tintcoat':'red', \n    'nero noctis':'black',\n    'firenze red metallic':'red',\n    'iridescent pearl tricoat':'white',\n    'twilight black':'black',\n    'radiant red metallic ii':'red', \n    'blue metallic':'blue',\n    'glacier white':'white',\n    'daytona gray':'gray', \n    'rosso mars metallic':'red',\n    'wolf gray':'gray',\n    'santorin black':'black',\n    'designo magno matte':'gray',\n    'emerald green metallic':'green',\n    'ruby flare pearl':'red',\n    'lunar silver metallic':'silver',\n    'eiger grey metallic':'gray',\n    'quartzite grey metallic':'gray',\n    'barcelona red':'red',\n    'beluga black':'black',\n    'matador red metallic':'red', \n    'billet silver metallic clearcoat':'silver',\n    'anodized blue metallic':'blue', \n    'black forest green':'green',\n    'ice silver metallic':'silver', \n    'sandstone metallic':'beige',\n    'magnetic gray clearcoat':'gray', \n    'crystal black pearl':'black',\n    'pacific blue metallic':'blue',\n    'stone gray metallic':'gray',\n    'iconic silver metallic':'silver', \n    'dark sapphire':'blue', \n    'onyx':'black',\n    'aventurine green metallic':'green',\n    'china blue':'blue', \n    'majestic black pearl':'black',\n    'midnight silver metallic':'silver',\n    'sting gray clearcoat':'silver',\n    'glacier blue metallic':'blue', \n    'chalk':'white', \n    'dark matter metallic':'gray',\n    'infrared tintcoat':'red', \n    'iridium metallic':'gray',\n    'fuji white':'white',\n    'alfa white':'white',\n    'kodiak brown metallic':'brown',\n    'aurora black':'black',\n    'onyx black':'black',\n    'nightfall gray metallic':'gray',\n    'obsidian black metallic':'black',\n    'phantom black':'black',\n    'remington red metallic':'red',\n    'designo diamond white':'white',\n    'lizard green':'green',\n    'rosso corsa':'red', \n    'shadow gray metallic':'gray',\n    'florett silver':'silver',\n    'quartz white':'white',\n    'db black clearcoat':'black',\n    'yulong white':'white', \n    'eiger grey':'gray', \n    'custom color':'custom',\n    'electric blue metallic':'blue', \n    'tempest':'red', \n    'lunar rock':'gray',\n    'mosaic black metallic':'black',\n    'gecko pearlcoat':'green',\n    'white clearcoat':'white',\n    'blu eleos':'blue',\n    'granite crystal metallic clearcoat':'gray',\n    'rich garnet metallic':'red',\n    'graphite grey metallic':'gray',\n    'bianco icarus metallic':'white', \n    'satin steel metallic':'gray',\n    'moonlight cloud':'black', \n    'matador red mica':'red',\n    'emin white':'white',\n    'machine gray metallic':'gray',\n    'white platinum tri-coat metallic':'white',\n    'cobra beige metallic':'beige',\n    'cayenne red tintcoat':'red',\n    'shoreline blue pearl':'blue',\n    'vik black':'black',\n    'shimmering silver':'silver',\n    'bianco monocerus':'white', \n    'carbonized gray metallic':'gray',\n    'carrara white metallic':'white',\n    'dark slate metallic':'gray',\n    'dark graphite metallic':'gray', \n    'sonic silver metallic':'silver',\n    'white knuckle clearcoat':'white', \n    'titanium silver':'silver',\n    'anthracite blue metallic':'blue', \n    'black obsidian':'black',\n    'polymetal gray metallic':'gray', \n    'orca black metallic':'black',\n    'wind chill pearl':'white',\n    'blue reflex mica':'blue',\n    'dark moss':'green',\n    'selenite grey metallic':'gray',\n    'kemora gray metallic':'gray', \n    'nightfall mica':'black',\n    'liquid platinum':'silver',\n    'mountain air metallic':'blue',\n    'kinetic blue':'blue',\n    'santorini black':'black',\n    'carbon black metallic':'black',\n    'gentian blue metallic':'blue', \n    'red multi':'red',\n    'super white':'white', \n    'pearl white':'white',\n    'typhoon gray metallic':'gray',\n    'navarra blue metallic':'blue', \n    'bianco isis':'white',\n    'navarra blue':'blue', \n    'volcano grey metallic':'gray', \n    'arctic gray metallic':'gray',\n    'pure white':'white',\n    'baltic gray':'gray',\n    'glacier white metallic':'white',\n    'frozen dark silver metallic':'silver',\n    'magnetic gray metallic':'gray',\n    'gun metallic':'gray',\n    'siren red tintcoat':'red',\n    'deep blue metallic':'blue',\n    'cirrus silver metallic':'silver',\n    'deep black pearl effect':'black',\n    'granite':'gray',\n    'sunset drift chromaflair':'orange',\n    'oryx white prl':'white', \n    'dark gray metallic':'gray',\n    'bayside blue':'blue', \n    'ice':'blue',\n    'mango tango pearlcoat':'orange',\n    'burnished bronze metallic': 'bronze',\n    'verde':'green',\n    'arctic white':'white',\n    'portofino blue metallic':'blue',\n    'dazzling white':'white', \n    'nero daytona':'black',\n    'nautical blue pearl':'blue', \n    'imperial blue metallic':'blue',\n    'vulcano black metallic':'black',\n    'silver radiance':'silver',\n    'hellayella clearcoat':'yellow',\n    'jungle green':'green',\n    'c / c':'custom',\n    'yulong':'white',\n    'pristine white':'white', \n    'silky silver':'silver', \n    'caspian blue':'blue', \n    'sangria red':'red',\n    'donington grey metallic':'gray', \n    'apex blue':'blue',\n    'rift metallic':'white',\n    'fountain blue':'blue',\n    'balloon white':'white', \n    'matte white':'white', \n    'frozen white':'white',\n    'pacific blue':'blue',\n    'rosso':'red', \n    'ironman silver':'silver',\n    'octane red pearlcoat':'red',\n    'selenite gray metallic':'gray',\n    'hydro blue pearlcoat':'blue',\n    'ingot silver metallic':'silver', \n    'quartz blue pearl':'blue',\n    'lunare white metallic':'white',\n    'ember pearlcoat':'brown',\n    'brands hatch gray metallic':'gray',\n    'navarre blue':'blue',\n    'midnight blue metallic':'blue',\n    'shadow black':'black',\n    'go mango!':'orange',\n    'maximum steel metallic':'gray',\n    'silver flare metallic':'silver',\n    'billet clearcoat metallic':'silver',\n    'hampton gray':'gray',\n    'red obsession':'red',\n    'silver mist':'silver',\n    'scarlet ember':'red', \n    'crimson red tintcoat':'red',\n    'tan':'beige',\n    'isle of man green metallic':'green', \n    'crystal black':'black', \n    'glacier':'white',\n    'iridium silver metallic':'silver',\n    'bronze dune metallic':'bronze',\n    'maroon':'red',\n    'platinum gray metallic':'gray', \n    'passion red':'red',\n    'silician yellow':'yellow',\n    'volcanic orange':'orange',\n    'crystal white pearl':'white',\n    'reflex silver':'silver',\n    'blue caelum':'blue',\n    'thunder gray':'gray',\n    'ultra black':'black', \n    'indus silver':'silver',\n    'horizon blue':'blue',\n    'grigio nimbus':'gray', \n    'carpathian grey':'gray',\n    'ametrin metallic': 'red',\n    'jupiter red':'red',\n    'gt silver':'silver'\n}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred = data_pred.replace({'ext_col': colors})\ntest_df = test_df.replace({'ext_col': colors})\ndata_pred['ext_col'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#exterior color\nfig, ax = plt.subplots(figsize=(12,8))\n\nsns.set(font_scale=1.5)\ndata_pred.groupby(\"ext_col\").mean(numeric_only=True).sort_values(\"price\",ascending=False).plot.bar(y=\"price\", ax=ax).set(ylabel=\"Price\", xlabel=\"Exterior Color\", title=\"Sale Price vs. Exterior Color\")\nax.axhline(y=data_pred[\"price\"].mean(numeric_only=True), label=\"mean\", color=\"black\", linestyle=\"--\");","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Feature: int_col (interior color)","metadata":{}},{"cell_type":"code","source":"data_pred['int_col'] = data_pred['int_col'].str.lower()\ntest_df['int_col'] = test_df['int_col'].str.lower()\ndata_pred['int_col'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"colors2 = {\n    '–': 'unknown',\n    'dark galvanized': 'black', \n    'parchment.': 'white',\n    'boulder': 'gray',\n    'medium earth gray': 'gray', \n    'ebony': 'black', \n    'canberra beige': 'beige',\n    'jet black': 'black',\n    'light platinum / jet black': 'black and white',\n    'macchiato/magmagrey': 'black and brown',\n    'cloud': 'white', \n    'rioja red': 'red', \n    'global black': 'black', \n    'medium stone': 'gray',\n    'navy pier': 'blue',\n    'dark ash': 'gray',\n    'sandstone': 'beige',\n    'canberra beige/black': 'black and beige',\n    'diesel gray / black': 'black and gray',\n    'sarder brown': 'brown',\n    'black onyx': 'black',\n    'white / brown': 'white and brown',\n    'black/gun metal': 'black and gray', \n    'slate': 'gray',\n    'satin black': 'black',\n    'macchiato beige/black': 'black and beige', \n    'charcoal': 'black',\n    'black / express red': 'black and red',\n    'cappuccino': 'brown',\n    'aragon brown': 'brown', \n    'parchment' : 'white',\n    'oyster w/contrast': 'beige',\n    'adrenaline red':'red',\n    'ebony.': 'black',\n    'shara beige': 'beige',\n    'graystone': 'gray',\n    'pearl beige':'beige',\n    'nero ade':'black', \n    'graphite':'gray',\n    'tan/ebony/ebony': 'black and tan',\n    'charcoal black': 'black', \n    'medium ash gray':'gray',\n    'ebony black':'black',\n    'light titanium': 'white',\n    'sakhir orange': 'orange',\n    'rock gray': 'gray',\n    'brandy': 'brown',\n    'carbon black': 'black',\n    'amber': 'tan',\n    'black w/red stitching': 'black',\n    'hotspur': 'red',\n    'chateau': 'brown',\n    'ice': 'gray',\n    'deep garnet': 'red',\n    'blk': 'black',\n    'grace white':'white',\n    'oyster/black': 'black and beige',\n    'mesa': 'brown',\n    'espresso': 'brown',\n    'black/graphite': 'black and gray',\n    'ebony / ebony accents': 'black',\n    'tan/ebony': 'black and tan',\n    'medium dark slate': 'gray',\n    'graphite w/gun metal': 'gray',\n    'obsidian black': 'black',\n    'cocoa / dune': 'brown',\n    'roast': 'brown',\n    'hotspur hide': 'red',\n    'gray w/blue bolsters': 'gray',\n    'chestnut': 'brown',\n    'saiga beige': 'beige',\n    'charles blue': 'blue',\n    'walnut': 'brown',\n    'ivory / ebony': 'black and white',\n    'caramel': 'brown',\n    'pimento red w/ebony': 'red',\n    'saddle brown': 'brown',\n    'dark gray': 'gray',\n    'silk beige/espresso brown': 'brown and beige',\n    'black / brown': 'black and brown',\n    'ebony/light oyster stitch': 'black', \n    'ebony / pimento': 'black and red',\n    'mistral gray / raven': 'black and gray', \n    'giallo taurus / nero ade': 'black and yellow', \n    'medium pewter': 'gray', \n    'black / saddle': 'black and brown', \n    'camel leather': 'tan',\n    'black/saddle brown': 'black and brown',\n    'macchiato': 'brown',\n    'anthracite': 'gray',\n    'mocha': 'brown',\n    'whisper beige': 'beige',\n    'titan black / quarzit': 'black and white',\n    'sahara tan': 'tan',\n    'porpoise': 'gray',\n    'black/red': 'black and red',\n    'titan black': 'black',\n    'amg black': 'black',\n    'deep cypress': 'brown',\n    'light slate': 'gray',\n    'red / black': 'black and red',\n    'beluga hide': 'beige',\n    'tupelo': 'tan',\n    'gideon': 'yellow',\n    'rhapsody blue': 'blue',\n    'medium light camel': 'tan', \n    'almond beige': 'beige',\n    'black / gray': 'black and gray',\n    'nero': 'black',\n    'agave green': 'green',\n    'deep chestnut': 'brown',\n    'dark auburn': 'red',\n    'shale': 'beige',\n    'silk beige/black': 'black and beige',\n    'magma red': 'red',\n    'linen': 'white',\n    'black / stone grey': 'black and gray',\n    'sand beige': 'beige', \n    'red/black': 'black and red', \n    'bianco polar': 'white',\n    'light gray': 'gray', \n    'platinum': 'white',\n    'ash': 'gray',\n    'black / graphite': 'black and gray',\n    'nougat brown': 'brown',\n    'camel': 'tan',\n    'mountain brown': 'brown',\n    'pimento / ebony': 'black and red',\n    'classic red': 'red',\n    'sakhir orange/black': 'black and orange',\n    'cobalt blue': 'blue',\n    'very light cashmere': 'beige', \n    'kyalami orange':'orange',\n    'orchid': 'white',\n    'beluga': 'beige'}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# replacing interior color names with the more general name for the color, except for a few color names that are different colors depending on brand\ndata_pred = data_pred.replace({'int_col': colors2})\ntest_df = test_df.replace({'int_col': colors2})\ndata_pred['int_col'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Feature: transmission","metadata":{}},{"cell_type":"code","source":"data_pred['transmission'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Main transmission types include: Automatic, Manual, CVT, DCT, and AMT. I will create a new column that contains which of these types each transmission is, and another column to contain the number of speeds, if listed. This way, most of the information in this column can be retained, but the categories will be more clear for the models to interpret.","metadata":{}},{"cell_type":"code","source":"def speed(s):\n    m = re.search(r'(\\d+)', s)\n    return int(m[1]) if m else 0\n\ndata_pred['speeds'] = data_pred['transmission'].apply(speed)\ntest_df['speeds'] = test_df['transmission'].apply(speed)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"transmission_type = {\n    'A/T': 'AT', \n    'Transmission w/Dual Shift Mode': 'DCT',\n    '7-Speed A/T':'AT',\n    '8-Speed A/T':'AT', \n    '10-Speed Automatic':'AT',\n    '1-Speed A/T':'AT', \n    '6-Speed A/T':'AT',\n    '10-Speed A/T':'AT',\n    '9-Speed A/T':'AT', \n    '8-Speed Automatic':'AT',\n    '9-Speed Automatic':'AT', \n    '5-Speed A/T':'AT',\n    'Automatic':'AT',\n    '7-Speed Automatic with Auto-Shift':'AT',\n    'CVT Transmission':'CVT',\n    '5-Speed M/T':'MT', \n    'M/T':'MT', \n    '6-Speed M/T':'MT', \n    '6-Speed Automatic':'AT',\n    '4-Speed Automatic':'AT', \n    '7-Speed M/T':'MT', \n    '2-Speed A/T':'AT',\n    '1-Speed Automatic':'AT', \n    'Automatic CVT':'CVT', \n    '4-Speed A/T':'AT',\n    '6-Speed Manual':'MT',\n    'Transmission Overdrive Switch':'AT',\n    '8-Speed Automatic with Auto-Shift':'AT', \n    '7-Speed Manual':'MT',\n    '7-Speed Automatic':'AT',\n    '9-Speed Automatic with Auto-Shift':'AT',\n    '6-Speed Automatic with Auto-Shift':'AT',\n    '6-Speed Electronically Controlled Automatic with O':'AT',\n    'F':'AT', \n    'CVT-F':'CVT',\n    '8-Speed Manual':'MT',\n    'Manual':'MT',\n    '–':'Unknown', \n    '2':'Unknown', \n    '6 Speed At/Mt':'AMT',\n    '5-Speed Automatic':'AT',\n    '2-Speed Automatic':'AT',\n    '8-SPEED A/T':'AT',\n    '7-Speed':'Unknown',\n    'Variable':'CVT',\n    'Single-Speed Fixed Gear':'MT', \n    '8-SPEED AT':'AT',\n    '10-Speed Automatic with Overdrive':'AT', \n    '7-Speed DCT Automatic':'DCT',\n    'SCHEDULED FOR OR IN PRODUCTION':'AT', \n    '6-Speed':'AT', \n    '6 Speed Mt':'MT',\n    'Automatic': 'AT'\n    \n    \n}","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred = data_pred.replace({'transmission': transmission_type})\ntest_df = test_df.replace({'transmission': transmission_type})\ndata_pred['transmission'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred['speeds'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#transmission type\nfig, ax = plt.subplots(figsize=(12,8))\n\nsns.set(font_scale=1.5)\ndata_pred.groupby(\"transmission\").mean(numeric_only=True).sort_values(\"price\",ascending=False).plot.bar(y=\"price\", ax=ax).set(ylabel=\"Price\", xlabel=\"Transmission Type\", title=\"Sale Price vs. Transmission Type\")\nax.axhline(y=data_pred[\"price\"].mean(numeric_only=True), label=\"mean\", color=\"black\", linestyle=\"--\");","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"While the type of transmission does seem to be related to car sale price, the highest priced cars have unknown transmission types. Therefore this may not be a very useful variable in modeling.","metadata":{}},{"cell_type":"code","source":"#transmission type\nfig, ax = plt.subplots(figsize=(12,8))\n\nsns.set(font_scale=1.5)\ndata_pred.groupby(\"speeds\").mean(numeric_only=True).sort_values(\"price\",ascending=False).plot.bar(y=\"price\", ax=ax).set(ylabel=\"Price\", xlabel=\"Transmission Speed\", title=\"Sale Price vs. Transmission Speed\")\nax.axhline(y=data_pred[\"price\"].mean(numeric_only=True), label=\"mean\", color=\"black\", linestyle=\"--\");","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Feature: engine","metadata":{}},{"cell_type":"code","source":"data_pred['engine'].unique","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"After already using the information about fuel type contained in 'engine', the other piece of information I will extract is the number of cylinders. The other information in this feature likely varies too much to be very useful in a model.","metadata":{}},{"cell_type":"code","source":"def cyls(c):\n    find = re.findall(\"\\d+(?= Cylinder)\", c)\n    if len(find) ==0:\n        return 0\n    else:\n        return find[0]\n    \ndata_pred['cylinders'] = data_pred['engine'].apply(cyls)\ntest_df['cylinders'] = test_df['engine'].apply(cyls)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred.drop(columns=['engine'], inplace=True)\ntest_df.drop(columns=['engine'], inplace=True)\ndata_pred.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Feature: brand","metadata":{}},{"cell_type":"code","source":"#brands\nfig, ax = plt.subplots(figsize=(12,8))\n\nsns.set(font_scale=1.5)\ndata_pred.groupby(\"brand\").mean(numeric_only=True).sort_values(\"price\",ascending=False).plot.bar(y=\"price\", ax=ax).set(ylabel=\"Price\", xlabel=\"Brand\", title=\"Sale Price vs. Car Brand\")\nax.axhline(y=data_pred[\"price\"].mean(numeric_only=True), label=\"mean\", color=\"black\", linestyle=\"--\");","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Certain car brands tend have a higher sale price, on average. However, since there are so many different brands, it might be more simple to group them based on their average sale price.","metadata":{}},{"cell_type":"code","source":"data_pred['brand'] = data_pred['brand'].str.lower()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"brands_price_sorted = data_pred[[\"brand\",\"price\"]].groupby(\"brand\").mean().sort_values(\"price\",ascending = False).reset_index()\nbrands_price_sorted","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"brands_price_sorted['price'].quantile([0.25, 0.5, 0.75])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The top 25% of car brands sold for 53,204 dollars or more on average. The bottom 25% of car brands sold for 28,095 dollars or less on average.","metadata":{}},{"cell_type":"code","source":"#splitting up car brands into categories for those in the top price quartile, the bottom quartile, and those in between\nhighest_priced_brands=[]\nmedium_priced_brands=[]\nlowest_priced_brands=[]\n    \nfor idx in brands_price_sorted.index:\n        if brands_price_sorted[\"price\"][idx] >= 53204.88:\n            highest_priced_brands.append(brands_price_sorted['brand'][idx])\n        elif brands_price_sorted['price'][idx] <= 28095:\n            lowest_priced_brands.append(brands_price_sorted['brand'][idx])\n        else:\n            medium_priced_brands.append(brands_price_sorted['brand'][idx])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"price_cat = []\nfor row in data_pred['brand']:\n    if row in highest_priced_brands: \n        price_cat.append(2)\n    elif row in medium_priced_brands:\n        price_cat.append(1)\n    else:\n        price_cat.append(0)\n\ndata_pred['brand_price_category'] = price_cat","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#same thing for test set\nprice_cat_test = []\nfor row in test_df['brand']:\n    if row in highest_priced_brands: \n        price_cat_test.append(2)\n    elif row in medium_priced_brands:\n        price_cat_test.append(1)\n    else:\n        price_cat_test.append(0)\n\ntest_df['brand_price_category'] = price_cat_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred.drop(columns = ['brand'], inplace=True)\ntest_df.drop(columns = ['brand'], inplace=True)\ndata_pred.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Feature: model","metadata":{}},{"cell_type":"code","source":"data_pred['model'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The feature 'model' is extremely variable and changes depending on brand. For this project, I am going to choose not to incorporate it in modeling.","metadata":{}},{"cell_type":"code","source":"data_pred.drop(columns=['model'], inplace=True)\ntest_df.drop(columns=['model'], inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##### Encoding categorical variables:","metadata":{}},{"cell_type":"markdown","source":"First, these variables need to be encoded as numerical values to be used in regression analysis.","metadata":{}},{"cell_type":"markdown","source":"Binary categorical features (those with only 2 categories) can be encoded using OrdinalEncoder:","metadata":{}},{"cell_type":"code","source":"# Encoding 'clean_title'\n\ntitle_train = data_pred[['clean_title']]\ntitle_test = test_df[['clean_title']]\nencoder_title = OrdinalEncoder()\ntitle_encoded_train = encoder_title.fit_transform(title_train)\ntitle_encoded_test = encoder_title.transform(title_test)\ntitle_encoded_train","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred['clean_title'] = title_encoded_train\ntest_df['clean_title'] = title_encoded_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Encoding 'accident'\naccident_train = data_pred[['accident']]\naccident_test = test_df[['accident']]\nordinal_enc = OrdinalEncoder(categories=[['None reported', 'At least 1 accident or damage reported']])\naccident_encoded_train = ordinal_enc.fit_transform(accident_train)\naccident_encoded_test = ordinal_enc.transform(accident_test)\naccident_encoded_train","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_pred['accident'] = accident_encoded_train\ntest_df['accident'] = accident_encoded_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Other categorical features with multiple categories can be label encoded:","metadata":{}},{"cell_type":"code","source":"label_fuel = LabelEncoder()\ndata_pred['fuel_type2'] = label_fuel.fit_transform(data_pred['fuel_type2'])\ntest_df['fuel_type2'] = label_fuel.transform(test_df['fuel_type2'])\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"label_transmission = LabelEncoder()\ndata_pred['transmission'] = label_transmission.fit_transform(data_pred['transmission'])\ntest_df['transmission'] = label_transmission.transform(test_df['transmission'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"label_ext_col = LabelEncoder()\ndata_pred['ext_col'] = label_ext_col.fit_transform(data_pred['ext_col'])\ntest_df['ext_col'] = label_ext_col.transform(test_df['ext_col'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"label_int_col = LabelEncoder()\ndata_pred['int_col'] = label_int_col.fit_transform(data_pred['int_col'])\ntest_df['int_col'] = label_int_col.transform(test_df['int_col'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_df = data_pred.copy()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Dropping any remaining unnecessary columns \nfinal_df.drop(columns=[\"transmission\"],inplace=True)\ntest_df.drop(columns=[\"transmission\"],inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Modeling","metadata":{}},{"cell_type":"code","source":"# storing all the features (independent variables) as 'X'\nX = final_df.drop(columns=['price'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# storing the target (dependent variable) as 'y'\ny = data_pred[['price']]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#train-test splitting the data for evaluating the models\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#formatting the target values\ny_train  = y_train.values.ravel()\ny_test = y_test.values.ravel()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"First, I will create a basic linear regression model as the baseline, and see how it performs. Models will be evaluated using root mean squared error (RMSE).","metadata":{}},{"cell_type":"code","source":"baseline = LinearRegression()\nbaseline.fit(X_train, y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"baseline_scores = cross_val_score(baseline, X_train, y_train, scoring = 'neg_root_mean_squared_error', cv=3)\n\nprint(np.mean(np.abs(baseline_scores)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The next model to try out is a lasso regression model.","metadata":{}},{"cell_type":"code","source":"#Lasso Regression\nlasso = Lasso()\n\nlasso.fit(X_train, y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lasso_scores = cross_val_score(lasso, X_train, y_train, scoring = 'neg_root_mean_squared_error', cv=3)\n\nprint(np.mean(np.abs(lasso_scores)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The lasso model performed even worse than the baseline.","metadata":{}},{"cell_type":"markdown","source":"Next, trying a random forest model:","metadata":{}},{"cell_type":"code","source":"#Random forests model\nrf = RandomForestRegressor()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf.fit(X_train, y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf_scores = cross_val_score(rf, X_train, y_train, scoring = 'neg_root_mean_squared_error', cv=3)\n\nprint(np.mean(np.abs(rf_scores)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The random forest model performed worse yet.","metadata":{}},{"cell_type":"markdown","source":"Lastly, trying a gradient boosting regressor model:","metadata":{}},{"cell_type":"code","source":"#GBM\ngbm = GradientBoostingRegressor()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"gbm.fit(X_train, y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# y_pred_gbm = cross_val_predict(gbm, X_test, y_test, cv=5) \ngbm_scores = cross_val_score(gbm, X_train, y_train, scoring = 'neg_root_mean_squared_error', cv=3)\n\nprint(np.mean(np.abs(gbm_scores)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The model with the best (lowest) RMSE value was the gradient boosting regressor model. This is the model that will be used in hyperparameter tuning, to see if the RMSE can be reduced even further.","metadata":{}},{"cell_type":"markdown","source":"##### Model Hyperparameter Tuning","metadata":{}},{"cell_type":"markdown","source":"To find the optimal value of the model's hyperparameters, I will search through the different combinations using GridSearchCV and return the values that will result in the best/lowest RMSE.","metadata":{}},{"cell_type":"code","source":"# # Takes a long time, uncomment to run\n# params = {\n#     'learning_rate':[0.15,0.1,0.01],\n#     'n_estimators':[100,250,500],\n#     'max_depth': [2,3,5]\n# }\n\n\n\n# tuner = GridSearchCV(gbm, params, scoring = 'neg_root_mean_squared_error')\n# tuner.fit(X_train, y_train)\n# sorted(tuner.cv_results_.keys())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# tuner.best_params_, tuner.best_score_","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#training a new model with the best hyperparameters, as found by the tuner\ntuned_gbm = GradientBoostingRegressor(\n    n_estimators= 100,\n    learning_rate= 0.1,\n    max_depth = 3\n                                     )","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tuned_gbm.fit(X_train, y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tuned_gbm_scores = cross_val_score(tuned_gbm, X_train, y_train, scoring = 'neg_root_mean_squared_error', cv=5)\n\nprint(np.mean(np.abs(tuned_gbm_scores)))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Tuning the GBM model hyperparameters improved the RMSE even further.","metadata":{}},{"cell_type":"markdown","source":"##### Generating predictions","metadata":{}},{"cell_type":"code","source":"y_pred_tuned = tuned_gbm.predict(test_df)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_tuned","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# creating a dataframe of the predicted price values for each id in the test set and saving as a csv file\npreds = pd.DataFrame({\"id\":test_ids, \"price\": y_pred_tuned})\npreds.to_csv(\"submission.csv\", index=False)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preds.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Conclusion","metadata":{}},{"cell_type":"markdown","source":"Of the baseline linear regression model, a lasso regression model, a random forest model, and a gradient boosting regression model, the gradient boosting regression model performed the best, with the lowest RMSE value.\nThis model was able to be improved even further through hyperparameter tuning with GridSearchCV.\nThe tuned model was then used to generate predictions for sale price in the test set of used cars with te same features used to train the model.\n","metadata":{}},{"cell_type":"markdown","source":"Next Steps:\n- Try other hyperparameters and different values to improve RMSE even more\n- Investigate other features of used cars to see their relationship to sale price\n- Try out other modeling techniques, to see if any perform even better than the tuned GBM model","metadata":{}}]}